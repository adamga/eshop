name: Run All Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: Run All Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dotnet-tests:
    runs-on: ubuntu-latest
    name: .NET Tests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json
        
    - name: Setup Docker for functional tests
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io
        sudo systemctl start docker
        sudo usermod -aG docker $USER
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore
      
    - name: Run Unit Tests
      run: |
        dotnet test tests/Basket.UnitTests/Basket.UnitTests.csproj --no-build --logger "trx;LogFileName=basket-unit-tests.trx" --collect:"XPlat Code Coverage"
        dotnet test tests/Ordering.UnitTests/Ordering.UnitTests.csproj --no-build --logger "trx;LogFileName=ordering-unit-tests.trx" --collect:"XPlat Code Coverage"
        dotnet test tests/ClientApp.UnitTests/ClientApp.UnitTests.csproj --no-build --logger "trx;LogFileName=clientapp-unit-tests.trx" --collect:"XPlat Code Coverage"
        
    - name: Run Functional Tests
      run: |
        dotnet test tests/Catalog.FunctionalTests/Catalog.FunctionalTests.csproj --no-build --logger "trx;LogFileName=catalog-functional-tests.trx" --collect:"XPlat Code Coverage"
        dotnet test tests/Ordering.FunctionalTests/Ordering.FunctionalTests.csproj --no-build --logger "trx;LogFileName=ordering-functional-tests.trx" --collect:"XPlat Code Coverage"
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: .NET Test Results
        path: '**/*.trx'
        reporter: dotnet-trx
        fail-on-error: true

  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Check E2E Test Configuration
      run: |
        echo "E2E tests are currently configured to run against a remote environment."
        echo "To run E2E tests locally, the test files need to be updated to use localhost."
        echo "Skipping E2E tests for now. Future enhancement: configure tests for local execution."
        echo "Current test files:"
        ls -la e2e/
        
    - name: Validate Playwright Configuration
      run: |
        echo "Validating Playwright configuration..."
        npx playwright show-trace --help > /dev/null 2>&1 && echo "✓ Playwright installation is valid" || echo "✗ Playwright installation issue"
        
    # Future enhancement: Enable when tests are configured for local execution
    # - name: Run Playwright tests
    #   run: npx playwright test